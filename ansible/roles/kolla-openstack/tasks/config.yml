---
# This first section deals with configuration files to which Kayobe adds
# default configuration.

- name: Check whether Kolla extra configuration files exist
  stat:
    path: "{{ kolla_extra_config_path }}/{{ item.file }}"
    get_checksum: false
    get_md5: false
    mime: false
  register: stat_result
  with_items:
    - { name: glance, file: glance.conf }
    - { name: influxdb, file: influxdb.conf }
    - { name: inspector, file: ironic-inspector.conf }
    - { name: ironic, file: ironic.conf }
    - { name: ironic_dnsmasq, file: ironic/ironic-dnsmasq.conf }
    - { name: neutron_ml2, file: neutron/ml2_conf.ini }

- name: Initialise a fact containing extra configuration
  set_fact:
    kolla_extra_config: {}

- name: Update a fact containing extra configuration
  set_fact:
    kolla_extra_config: "{{ kolla_extra_config | combine({item.item.name: lookup('template', '{{ item.stat.path }}')}) }}"
  with_items: "{{ stat_result.results }}"
  when: item.stat.exists

- name: Set facts containing extra configuration
  set_fact:
    # Extra free-form user-provided configuration.
    kolla_extra_glance: "{{ kolla_extra_config.glance | default }}"
    kolla_extra_inspector: "{{ kolla_extra_config.inspector | default }}"
    kolla_extra_influxdb: "{{ kolla_extra_config.influxdb | default }}"
    kolla_extra_ironic: "{{ kolla_extra_config.ironic | default }}"
    kolla_extra_ironic_dnsmasq: "{{ kolla_extra_config.ironic_dnsmasq | default }}"
    kolla_extra_neutron_ml2: "{{ kolla_extra_config.neutron_ml2 | default }}"

- name: Ensure the Kolla OpenStack configuration directores exist
  file:
    path: "{{ item.dest }}"
    state: directory
    mode: 0750
  with_items: "{{ kolla_openstack_custom_config }}"
  when: item.enabled | bool

- name: Ensure the Kolla OpenStack configuration files exist
  template:
    src: "{{ item.src }}"
    dest: "{{ kolla_node_custom_config_path }}/{{ item.dest }}"
    mode: 0640
  with_items:
    - { src: glance.conf.j2, dest: glance.conf, enabled: "{{ kolla_enable_glance }}" }
    - { src: ironic.conf.j2, dest: ironic.conf, enabled: "{{ kolla_enable_ironic }}" }
    - { src: ironic-dnsmasq.conf.j2, dest: ironic/ironic-dnsmasq.conf, enabled: "{{ kolla_enable_ironic }}" }
    - { src: ironic-inspector.conf.j2, dest: ironic-inspector.conf, enabled: "{{ kolla_enable_ironic }}" }
    - { src: ml2_conf.ini.j2, dest: neutron/ml2_conf.ini, enabled: "{{ kolla_enable_neutron }}" }
    - { src: pxelinux.default.j2, dest: ironic/pxelinux.default, enabled: "{{ kolla_enable_ironic }}" }
    - { src: inspector.ipxe.j2, dest: ironic/inspector.ipxe, enabled: "{{ kolla_enable_ironic_ipxe }}" }
  when: item.enabled | bool

# Now copy the ironic inspector kernel and ramdisk images into place.

- name: Ensure the ironic inspector kernel and ramdisk are downloaded
  get_url:
    url: "{{ item.url }}"
    dest: "{{ kolla_node_custom_config_path }}/ironic/{{ item.dest }}"
    mode: 0640
  with_items:
    - { url: "{{ kolla_inspector_ipa_kernel_upstream_url }}", dest: "ironic-agent.kernel" }
    - { url: "{{ kolla_inspector_ipa_ramdisk_upstream_url }}", dest: "ironic-agent.initramfs" }
  when:
    - kolla_enable_ironic | bool
    - item.url != None

- name: Ensure the ironic inspector kernel and ramdisk are copied
  copy:
    src: "{{ item.path }}"
    dest: "{{ kolla_node_custom_config_path }}/ironic/{{ item.dest }}"
    mode: 0640
  with_items:
    - { path: "{{ kolla_inspector_ipa_kernel_path }}", dest: "ironic-agent.kernel" }
    - { path: "{{ kolla_inspector_ipa_ramdisk_path }}", dest: "ironic-agent.initramfs" }
  when:
    - kolla_enable_ironic | bool
    - item.path != None

# TODO: comment
- name: Check whether Kolla extra configuration files exist
  stat:
    path: "{{ item.src }}"
    get_checksum: false
    get_md5: false
    mime: false
  register: stat_src_result
  with_items: "{{ kolla_openstack_custom_config_files }}"

- name: Ensure extra configuration files exist
  template:
    src: "{{ item.item.src }}"
    dest: "{{ item.item.dest }}"
    mode: 0640
  with_items: "{{ stat_src_result.results }}"
  when: item.stat.exists

# FIXME: files
- name: Ensure extra configuration parent directories are present
  file:
    path: "{{ item.item.dest }}/{{ item.stat.path | relpath(item.item.src) | dirname }}"
    recurse: true
    state: directory
  with_items: "{{ stat_src_result.results }}"
  when:
    - item.item.enabled | bool
    - item.stat.exists

# We support a fairly flexible mechanism of dropping config file templates into
# an 'extra' config directory, and passing these through to kolla-ansible. We
# look for matching files in the source directory to template, and also remove
# any unexpected files from the destination, to support removal of files.

- name: Find extra configuration files
  find:
    path: "{{ item.src }}"
    patterns: "{{ item.patterns }}"
    recurse: true
  with_items: "{{ kolla_openstack_custom_config_dirs }}"
  register: find_src_result

- name: Find previously generated extra configuration files
  find:
    path: "{{ item.dest }}"
    patterns: "{{ item.patterns }}"
  with_items: "{{ kolla_openstack_custom_config_dirs }}"
  register: find_dest_result

- name: Ensure extra configuration parent directories are present
  file:
    path: "{{ item.0.item.dest }}/{{ item.1.path | relpath(item.0.item.src) | dirname }}"
    recurse: true
    state: directory
  with_subelements:
    - "{{ find_src_result.results }}"
    - files
    - skip_missing: true
  when:
    - item.0.item.enabled | bool
    - item.1.path | basename not in item.0.item.ignore | default([])

- name: Ensure wildcard extra configuration files exist
  template:
    src: "{{ item.1.path }}"
    dest: "{{ item.0.item.dest }}/{{ item.1.path | relpath(item.0.item.src) }}"
    mode: 0640
  with_subelements:
    - "{{ find_src_result.results }}"
    - files
    - skip_missing: true
  when:
    - item.0.item.enabled | bool
    - item.1.path | basename not in item.0.item.ignore | default([])

- name: Ensure unnecessary extra configuration files are absent
  file:
    path: "{{ item.1.path }}"
    state: absent
  with_subelements:
    - "{{ find_dest_result.results }}"
    - files
    - skip_missing: true
  when:
    - not item.0.item.enabled or
      item.1.path | basename not in src_files
    - item.1.path | basename not in item.0.item.ignore | default([])
  vars:
    # Find the source result that corresponds to this one.
    src_result: "{{ (find_src_result.results | selectattr('item', 'equalto', item.0.item) | list)[0] }}"
    # Find the list of files in the source.
    src_files: "{{ src_result.files | map(attribute='path') | map('basename') | list }}"
